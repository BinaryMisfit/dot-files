#!/usr/bin/env bash

if [[ -f "${HOME}/.dotfiles/default/scripts/shared/bmfunc.sh" ]]; then
  source "${HOME}/.dotfiles/default/scripts/shared/bmfunc.sh"
  if [[ -n "${BM_LOADED+x}" ]]; then
    bm_init
  else
    printf "\r\033[0;91m[FAILED]\033[0;97m Shared functions not loaded\033[0m\n"
    exit 255
  fi
else
  printf "\r\033[0;91m[FAILED]\033[0;97m Shared functions not found\033[0m\n"
  exit 255
fi

bm_print_title "Ubuntu configurator V1.0.0"
bm_user_no_sudo
bm_print_info "User: ${BM_USER}"
bm_print_info "Home: ${HOME}"
bm_print_info "Sudo: ${BM_USE_SUDO}"
bm_print_info "Script path: $0"
bm_command_locate add-apt-repository
bm_command_locate md5sum
bm_task_start "Configuring environment"
if [[ ! -d "${HOME}/.npm_global" ]]; then
  bm_task_update "Configuring environment"
  bm_make_dir "${HOME}/.npm_global"
fi

bm_task_ok "Configuring environment"
bm_task_start "Checking nodesource"
if [[ "${BM_USE_SUDO}" == "1" ]]; then
  DISTRO="$(lsb_release -s -c)"
  FILE_CONTENT="\
  deb [signed-by=/usr/share/keyrings/nodesource.gpg] https://deb.nodesource.com/node_16.x $DISTRO main
  deb-src [signed-by=/usr/share/keyrings/nodesource.gpg] https://deb.nodesource.com/node_16.x $DISTRO main\n"
  if [[ -f /etc/apt/sources.list.d/nodesource.list ]]; then
    MD5_CURRENT=$(md5sum /etc/apt/sources.list.d/nodesource.list | awk '{ print $1 }')
    MD5_NEW=$(echo -en "${FILE_CONTENT}" | md5sum | awk '{ print $1 }')
    if [[ "${MD5_CURRENT}" != "${MD5_NEW}" ]]; then
      bm_task_update "Checking nodesource"
      curl -fsSL https://deb.nodesource.com/gpgkey/nodesource.gpg.key | gpg --dearmor |
        sudo tee -a /usr/share/keyrings/nodesource.gpg >/dev/null
      echo -en "${FILE_CONTENT}" | sudo tee -a /etc/apt/sources.list.d/nodesource.list >/dev/null
      bm_task_ok "Checking nodesource"
      bm_task_start "Updating apt"
      if ! bm_command_execute "sudo apt-get update"; then
        bm_task_failed "Updating apt"
        bm_command_output_error
      fi

      bm_task_ok "Updating apt"
      bm_print_info "Version C: ${MD5_CURRENT}"
      bm_print_info "Version N: ${MD5_NEW}"
      bm_command_output_success
    else
      bm_task_ok "Checking nodesource"
      bm_print_info "Version C: ${MD5_CURRENT}"
      bm_print_info "Version N: ${MD5_NEW}"
    fi

    unset DISTRO
    unset MD5_CURRENT
    unset MD5_NEW
  fi

  if [[ ! -f /etc/apt/sources.list.d/nodesource.list ]]; then
    bm_task_update "Checking nodesource"
    curl -fsSL https://deb.nodesource.com/gpgkey/nodesource.gpg.key | gpg --dearmor |
      sudo tee -a /usr/share/keyrings/nodesource.gpg >/dev/nul
    echo -en "${FILE_CONTENT}" | sudo tee -a /etc/apt/sources.list.d/nodesource.list >/dev/null
    bm_task_ok "Checking nodesource"
    bm_task_start "Updating apt"
    if ! bm_command_execute "sudo apt-get update"; then
      bm_task_failed "Updating apt"
      bm_command_output_error
    fi

    bm_task_ok "Updating apt"
    bm_command_output_success
  fi
else
  bm_task_skip "Checking nodesource"
fi

bm_task_start "Checking git ppa"
if [[ "${BM_USE_SUDO}" == "1" ]]; then
  bm_task_update "Checking git ppa"
  if [[ "$(grep -l git-core /etc/apt/sources.list.d/*)" == "" ]]; then
    if ! bm_command_execute "sudo add-apt-repository -nsy ppa:git-core/ppa"; then
      bm_task_failed "Checking git ppa"
      bm_command_output_error
    fi

    bm_task_ok "Checking git ppa"
    bm_command_output_success
    bm_task_start "Updating apt"
    if ! bm_command_execute "sudo apt-get update"; then
      bm_task_failed "Updating apt"
      bm_command_output_error
    fi

    bm_task_ok "Updating apt"
    bm_command_output_success
  else
    bm_task_ok "Checking git ppa"
  fi
else
  bm_task_skip "Checking git ppa"
fi

bm_task_start "Checking neovim unstable"
if [[ "${BM_USE_SUDO}" == "1" ]]; then
  bm_task_update "Checking neovim unstable"
  if [[ "$(grep -l neovim-ppa/unstable /etc/apt/sources.list.d/*)" == "" ]]; then
    if ! bm_command_execute "sudo add-apt-repository -nsy ppa:neovim-ppa/unstable"; then
      bm_task_failed "Checking neovim unstable"
      bm_command_output_error
    fi

    bm_task_ok "Checking neovim unstable"
    bm_command_output_success
    bm_task_start "Updating apt"
    if ! bm_command_execute "sudo apt-get update"; then
      bm_task_failed "Updating apt"
      bm_command_output_error
    fi

    bm_task_ok "Updating apt"
    bm_command_output_success
  else
    bm_task_ok "Checking neovim unstable"
  fi
else
  bm_task_skip "Checking neovim unstable"
fi

bm_task_start "Checking required apps"
INSTALL_LIST=()
if [[ "${BM_USE_SUDO}" == "1" ]]; then
  if ! bm_ubuntu_package_installed build-essential; then
    INSTALL_LIST+=("build-essential")
  fi

  if [[ "$(bm_ubuntu_package_installed coreutils)" == "0" ]]; then
    INSTALL_LIST+=("coreutils")
  fi

  if [[ "$(bm_command_check cron)" == "0" ]]; then
    INSTALL_LIST+=("cron")
  fi

  if [[ "$(bm_command_check curl)" == "0" ]]; then
    INSTALL_LIST+=("curl")
  fi

  if [[ "$(bm_command_check neofetch)" == "0" ]]; then
    INSTALL_LIST+=("neofetch")
  fi

  if [[ "$(bm_command_check node)" == "0" ]]; then
    INSTALL_LIST+=("nodejs")
  fi

  if [[ ${#INSTALL_LIST[@]} -eq 0 ]]; then
    bm_task_ok "Checking required apps"
  else
    bm_task_update "Checking required apps"
    bm_task_ok "Checking required apps"
    for APP in "${INSTALL_LIST[@]}"; do
      bm_print_info "Missing ${APP}"
    done
  fi

  unset INSTALL_LIST
else
  bm_task_skip "Checking required apps"
fi

printf "\033[0m\n"
if [[ "${SUDO}" == "1" ]]; then
  if [[ "$(command -v neofetch)" == "" ]]; then
    INSTALL_LIST+=("neofetch")
  fi

  if [[ "$(command -v node)" == "" ]]; then
    INSTALL_LIST+=("nodejs")
  fi

  if [[ "$(command -v nvim)" == "" ]]; then
    INSTALL_LIST+=("neovim")
  fi

  if [[ "$(command -v python3)" == "" ]]; then
    INSTALL_LIST+=("python3")
  fi

  if [[ "$(command -v socat)" == "" ]]; then
    INSTALL_LIST+=("socat")
  fi

  if [[ "$(command -v tmux)" == "" ]]; then
    INSTALL_LIST+=("tmux")
  fi

  if [[ "$(command -v zsh)" == "" ]]; then
    INSTALL_LIST+=("zsh")
  fi

  if [[ ! -f /usr/share/zsh-antigen/antigen.zsh ]]; then
    INSTALL_LIST+=("zsh-antigen")
  fi

  INSTALL_LIST=($(printf "%s\n" ${INSTALL_LIST[@]} | sort -u))

  if [[ "${INSTALL_LIST}" != "" ]]; then
    if [[ "${VERBOSE}" == "1" ]]; then
      printf "\033[0;31mMissing %s\033[0m\n" "${INSTALL_LIST[@]}"
      printf "\033[0;34mRunning apt-get update\033[0m\n"
    fi

    apt-get ${ARGS_APT} update

    if [[ "${VERBOSE}" == "1" ]]; then
      printf "\033[0;34mRunning apt-get install\033[0m\n"
    fi

    apt-get ${ARGS_APT} install -y ${INSTALL_LIST[@]}
  fi

  if [[ "${VERBOSE}" != "-1" ]]; then
    printf "\033[0;32mAll packages have been installed\033[0m\n"
  fi
fi

INSTALL_LIST=()

if [[ "${SUDO}" == "1" ]]; then
  if [[ "" != "$(dpkg-query -W --showformat='${Status}\n' \
    vim | grep "install ok installed" 2>/dev/null)" ]]; then
    INSTALL_LIST+=("vim")
  fi

  if [[ "" != "$(dpkg-query -W --showformat='${Status}\n' \
    vim-tiny | grep "install ok installed" 2>/dev/null)" ]]; then
    INSTALL_LIST+=("vim-tiny")
  fi

  if [[ "${INSTALL_LIST}" != "" ]]; then
    if [[ "${VERBOSE}" == "1" ]]; then
      printf "\033[0;31mRemove %s\033[0m\n" "${INSTALL_LIST[@]}"
      printf "\033[0;34mRunning apt-get remove\033[0m\n"
    fi

    apt-get ${ARGS_APT} remove --purge -y ${INSTALL_LIST[@]}

    if [[ "${VERBOSE}" == "1" ]]; then
      printf "\033[0;34mRunning apt-get autoremove\033[0m\n"
    fi

    apt-get ${ARGS_APT} autoremove -y
  fi

  if [[ "${VERBOSE}" != "-1" ]]; then
    printf "\033[0;32mAll packages have been removed\033[0m\n"
  fi
fi

if [[ "" == "$(npm list -g neovim)" ]]; then
  if [[ "${VERBOSE}" == "1" ]]; then
    printf "\033[0;34mInstalling neovim [global]\033[0m\n"
  fi

  npm -g install neovim@latest &>/dev/null
fi

if [[ "${SUDO}" == "1" ]] && [[ "${SUDO_USER}" != "" ]]; then
  if [[ "" == "$(sudo -i -u "${SUDO_USER}" npm list -g neovim)" ]]; then
    if [[ "${VERBOSE}" == "1" ]]; then
      printf "\033[0;34mInstalling neovim [${SUDO_USER}]\033[0m\n"
    fi

    sudo -i -u "${SUDO_USER}" npm -g install neovim@latest &>/dev/null
  fi
fi

if [[ "${VERBOSE}" != "-1" ]]; then
  printf "\033[0;32mAll node packages have been installed\033[0m\n"
fi

if [[ "${SUDO}" == "1" ]]; then
  if [[ "" == "$(command -v pip)" ]]; then
    if [[ "${VERBOSE}" == "1" ]]; then
      printf "\033[0;34mInstalling pip\033[0m\n"
    fi

    curl -fL ${ARGS_CURL} https://bootstrap.pypa.io/get-pip.py | python3 - &>/dev/null
    python3 -m pip install --upgrade pip &>/dev/null
  fi
fi

if [[ "${SUDO}" == "1" ]]; then
  if [[ "" == "$(python3 -m pip list | grep pynvim)" ]]; then
    if [[ "${VERBOSE}" == "1" ]]; then
      printf "\033[0;34mInstalling pynvim\033[0m\n"
    fi

    python3 -m pip install --upgrade pynvim &>/dev/null
  fi

  if [[ "${VERBOSE}" != "-1" ]]; then
    printf "\033[0;32mAll pip packages have been installed\033[0m\n"
  fi

  if [[ -f /etc/sudoers.d/90-cloud-init-users ]]; then
    rm /etc/sudoers.d/90-cloud-init-users
  fi

  FILE_CONTENT="Defaults env_keep += \"TMUX\""
  if [[ -f /etc/sudoers.d/50-keep-environment ]]; then
    MD5_CURRENT=$(md5sum /etc/sudoers.d/50-keep-environment | awk '{ print $1 }')
    MD5_NEW=$(echo ${FILE_CONTENT} | md5sum | awk '{ print $1 }')
    if [[ "${MD5_CURRENT}" != "${MD5_NEW}" ]]; then
      if [[ "${VERBOSE}" == "1" ]]; then
        printf "\033[0;34mUpdating sudo environment\033[0m\n"
        printf "\033[0;31mMD5 Mismatch ${MD5_CURRENT}/${MD5_NEW}\033[0m\n"
      fi

      sudo echo ${FILE_CONTENT} >/etc/sudoers.d/50-keep-environment
    fi
  else
    if [[ "${VERBOSE}" == "1" ]]; then
      printf "\033[0;34mUpdating sudo environment\033[0m\n"
    fi

    sudo echo ${FILE_CONTENT} >/etc/sudoers.d/50-keep-environment
  fi
fi

if [[ "${SUDO}" == "1" ]]; then
  if [[ "$(which zsh)" != "$(getent passwd $USER | awk -F: '{print $NF}')" ]]; then
    if [[ "${VERBOSE}" == "1" ]]; then
      printf "\033[0;34mUpdating shell [$USER]\033[0m\n"
    fi

    chsh ${USER} --shell $(which zsh)
  fi
fi

if [[ "${SUDO}" == "1" ]] && [[ "${SUDO_USER}" != "" ]]; then
  if [[ "$(which zsh)" != "$(getent passwd $SUDO_USER | awk -F: '{print $NF}')" ]]; then
    if [[ "${VERBOSE}" == "1" ]]; then
      printf "\033[0;34mUpdating shell [$SUDO_USER]\033[0m\n"
    fi

    chsh ${SUDO_USER} --shell $(which zsh)
  fi
fi

if [[ "$(which nvim)" != "$(update-alternatives --get-selections | grep 'editor' | awk '{ print $3 }')" ]]; then
  if [[ "${VERBOSE}" == "1" ]]; then
    printf "\033[0;34mUpdating editor\033[0m\n"
  fi

  if [[ "" == "$(update-alternatives --display vi | grep $(which nvim))" ]]; then
    update-alternatives --install /usr/bin/vi vi $(which nvim) 100 ${ARGS_QUIET}
  fi

  if [[ "" == "$(update-alternatives --display editor | grep $(which nvim))" ]]; then
    update-alternatives --install /usr/bin/editor editor $(which nvim) 100 ${ARGS_QUIET}
  fi

  update-alternatives --set editor $(which nvim) ${ARGS_QUIET}
  update-alternatives --set vi $(which nvim) ${ARGS_QUIET}
fi

if [[ "${SUDO}" == "1" ]] && [[ "${SUDO_USER}" != "" ]]; then
  FILE_CONTENT="\
  #!/bin/bash
  \nneofetch --config /etc/neofetch/config.conf\n"
  if [[ -f /etc/update-motd.d/01-neofetch ]]; then
    MD5_CURRENT=$(md5sum /etc/update-motd.d/01-neofetch | awk '{ print $1 }')
    MD5_NEW=$(echo -en ${FILE_CONTENT} | md5sum | awk '{ print $1 }')
    if [[ "${MD5_CURRENT}" != "${MD5_NEW}" ]]; then
      if [[ "${VERBOSE}" == "1" ]]; then
        printf "\033[0;34mUpdating sudo environment\033[0m\n"
        printf "\033[0;31mMD5 Mismatch ${MD5_CURRENT}/${MD5_NEW}\033[0m\n"
      fi

      sudo echo -en ${FILE_CONTENT} >/etc/update-motd.d/01-neofetch
    fi
  else
    if [[ "${VERBOSE}" == "1" ]]; then
      printf "\033[0;34mUpdating sudo environment\033[0m\n"
    fi

    sudo echo -en ${FILE_CONTENT} >/etc/update-motd.d/01-neofetch
  fi

  if [[ -d "/home/${SUDO_USER}/.dotfiles/default/etc/neofetch" ]]; then
    cp -R "/home/${SUDO_USER}/.dotfiles/default/etc/neofetch" /etc
  fi

  chmod -R 444 /etc/update-motd.d/*
  chmod -R 555 /etc/update-motd.d/01-neofetch
  chmod -R 555 /etc/update-motd.d/9?-*
fi

if [[ "${VERBOSE}" != "-1" ]]; then
  if [[ "${SUDO}" == "1" ]]; then
    printf "\033[0;32mAll commands have been executed\033[0m\n"
  fi

  printf "\033[0;32m\n==> All tasks executed successfully\033[0m\n"
fi
