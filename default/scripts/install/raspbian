#!/usr/bin/env bash
ARGS_APT="-qq"
ARGS_CURL="-sS"
ARGS_QUIET="--quiet"
CONF_NODE=0
DISTRO="$(lsb_release -s -c)"
FILE_CONTENT=
FORCE=0
INSTALL_LIST=()
MD5_CURRENT=
MD5_NEW=
SUDO=1
SOURCES_ADDED=0
VERBOSE=0

if [[ "$(groups | grep sudo)" == "" ]] && [[ "${USER}" != "root" ]]; then
  SUDO=0
fi

if [[ "${EUID}" != 0 ]]; then
  SUDO=0
fi

while getopts "fsv" OPT; do
  case "${OPT}" in
    f)
      FORCE=1
      ARGS_APT=
      ARGS_CURL=
      ARGS_QUIET=
      VERBOSE=1
      ;;
    s)
      VERBOSE=-1
      ;;
    v)
      ARGS_APT=
      ARGS_CURL=
      ARGS_QUIET=
      VERBOSE=1
      ;;
  esac
done

shift $((OPTIND-1))

[[ "${1:-}" = "--" ]] && shift

if [[ "${SUDO}" == "1" ]] && [[ "${FORCE}" == "1" ]]; then
  CONF_NODE=1
elif [[ "${FORCE}" == "1" ]]; then
  CONF_NODE=1
fi

if [[ "${FORCE}" == "1" ]] || [[ "${VERBOSE}" == "1" ]]; then
  printf "\033[0;93m==> Command line parameters\033[0m\n"
  printf "\033[0;93m  User:\t\t\t\033[0m${USER}\033[0m\n"
  printf "\033[0;93m  Force:\t\t\033[0m${FORCE}\033[0m\n"
  printf "\033[0;93m  SUDO User:\t\t\033[0m${SUDO_USER}\033[0m\n"
  printf "\033[0;93m  Verbose:\t\t\033[0m${VERBOSE}\033[0m\n"
  printf "\033[0;93m\n==> Command arguments\033[0m\n"
  printf "\033[0;93m  APT:\t\t\033[0m${ARGS_APT}\033[0m\n"
  printf "\033[0;93m  Curl:\t\t\033[0m${ARGS_CURL}\033[0m\n"
  printf "\033[0;93m  Quiet:\t\t\033[0m${ARGS_QUIET}\033[0m\n"
  printf "\033[0;93m\n==> Commands enabled\033[0m\n"
  printf "\033[0;93m  Configure Node:\t\033[0m${CONF_NODE}\033[0m\n"
  printf "\033[0;92m\nAll command output displayed\033[0m\n"
fi

if [[ "${CONF_NODE}" == "1" ]] && [[ "${SUDO_USER}" != "" ]]; then
  if [[ ! -d "/home/${SUDO_USER}/.npm_global" ]]; then
    if [[ "${VERBOSE}" == "1" ]]; then
      printf "\033[0;94mCreating npm_global [${SUDO_USER}]\033[0m\n"
    fi

    mkdir -p "/home/${SUDO_USER}/.npm_global"
    chown -R ${SUDO_USER}:${SUDO_USER} "/home/${SUDO_USER}/.npm_global"
  fi
elif [[ "${CONF_NODE}" == "1" ]]; then
  if [[ ! -d "/home/${USER}/.npm_global" ]]; then
    if [[ "${VERBOSE}" == "1" ]]; then
      printf "\033[0;94mCreating npm_global [${USER}]\033[0m\n"
    fi

    mkdir -p "/home/${USER}/.npm_global"
    chown -R ${USER}:${USER} "/home/${USER}/.npm_global"
  fi
fi

if [[ "${SUDO}" == "1" ]]; then
  if [[ "$(grep -l neovim-ppa/unstable /etc/apt/sources.list.d/*)" == "" ]]; then
    if [[ "${VERBOSE}" == "1" ]]; then
      printf "\033[0;94mInstalling neovim repository\033[0m\n"
    fi

    add-apt-repository -sy ppa:neovim-ppa/unstable 2>&1 > /dev/null
    SOURCES_ADDED=1
    INSTALL_LIST+=("neovim")
  fi

  if [[ "${SOURCES_ADDED}" == "1" ]]; then
    if [[ "${VERBOSE}" == "1" ]]; then
      printf "\033[0;94mRunning apt-get update\033[0m\n"
    fi

    apt-get ${ARGS_APT} update
  fi

  if [[ "${VERBOSE}" != "-1" ]]; then
    printf "\033[0;92mAll sources have been installed\033[0m\n"
  fi

  if [[ "" == "$(dpkg-query -W --showformat='${Status}\n' \
    build-essential 2>/dev/null)" ]]; then
    INSTALL_LIST+=("build-essential")
  fi

  if [[ "" == "$(dpkg-query -W --showformat='${Status}\n' \
    coreutils 2>/dev/null)" ]]; then
    INSTALL_LIST+=("coreutils")
  fi

  if [[ "$(command -v cron)" == "" ]]; then
    INSTALL_LIST+=("cron")
  fi

  if [[ "$(command -v curl)" == "" ]]; then
    INSTALL_LIST+=("curl")
  fi

  if [[ "$(command -v curl)" == "" ]]; then
    INSTALL_LIST+=("git")
  fi

  if [[ "$(command -v nvim)" == "" ]]; then
    INSTALL_LIST+=("neovim")
  fi

  if [[ "$(command -v neofetch)" == "" ]]; then
    INSTALL_LIST+=("neofetch")
  fi

  if [[ "$(command -v node)" == "" ]]; then
    INSTALL_LIST+=("nodejs")
  fi

  if [[ "$(command -v python3)" == "" ]]; then
    INSTALL_LIST+=("python3")
  fi

  if [[ "$(command -v socat)" == "" ]]; then
    INSTALL_LIST+=("socat")
  fi

  if [[ "$(command -v yarn)" == "" ]]; then
    INSTALL_LIST+=("yarn")
  fi

  if [[ "$(command -v tmux)" == "" ]]; then
    INSTALL_LIST+=("tmux")
  fi

  if [[ "$(command -v zsh)" == "" ]]; then
    INSTALL_LIST+=("zsh")
  fi

  if [[ ! -f /usr/share/zsh-antigen/antigen.zsh ]]; then
    INSTALL_LIST+=("zsh-antigen")
  fi

  INSTALL_LIST=($(printf "%s\n" ${INSTALL_LIST[@]} | sort -u))

  if [[ "${INSTALL_LIST}" != "" ]]; then
    if [[ "${VERBOSE}" == "1" ]]; then
      printf "\033[1;93mMissing %s\033[0m\n" "${INSTALL_LIST[@]}"
      printf "\033[2;94mRunning apt-get update\033[0m\n"
    fi

    apt-get ${ARGS_APT} update

    if [[ "${VERBOSE}" == "1" ]]; then
      printf "\033[0;94mRunning apt-get install\033[0m\n"
    fi

    apt-get ${ARGS_APT} install -y ${INSTALL_LIST[@]}
  fi

  if [[ "${VERBOSE}" != "-1" ]]; then
    printf "\033[0;92mAll packages have been installed\033[0m\n"
  fi
fi

INSTALL_LIST=()

if [[ "${SUDO}" == "1" ]]; then
  if [[ "" != "$(dpkg-query -W --showformat='${Status}\n' \
    vim | grep "install ok installed" 2>/dev/null)" ]]; then
    INSTALL_LIST+=("vim")
  fi

  if [[ "" != "$(dpkg-query -W --showformat='${Status}\n' \
    vim-tiny | grep "install ok installed" 2>/dev/null)" ]]; then
    INSTALL_LIST+=("vim-tiny")
  fi

  if [[ "${INSTALL_LIST}" != "" ]]; then
    if [[ "${VERBOSE}" == "1" ]]; then
      printf "\033[0;91mRemove %s\033[0m\n" "${INSTALL_LIST[@]}"
      printf "\033[0;94mRunning apt-get remove\033[0m\n"
    fi

    apt-get ${ARGS_APT} remove --purge -y ${INSTALL_LIST[@]}

    if [[ "${VERBOSE}" == "1" ]]; then
      printf "\033[0;94mRunning apt-get autoremove\033[0m\n"
    fi

    apt-get ${ARGS_APT} autoremove -y
  fi

  if [[ "${VERBOSE}" != "-1" ]]; then
    printf "\033[0;92mAll packages have been removed\033[0m\n"
  fi
fi

if [[ "" == "$(yarn list -g neovim)" ]]; then
  if [[ "${VERBOSE}" == "1" ]]; then
    printf "\033[0;94mInstalling neovim [global]\033[0m\n"
  fi

  npm -g install neovim@latest &>/dev/null
fi

if [[ "${SUDO}" == "1" ]] && [[ "${SUDO_USER}" != "" ]]; then
  if [[ "" == "$(sudo -i -u "${SUDO_USER}" npm list -g neovim)" ]]; then
    if [[ "${VERBOSE}" == "1" ]]; then
      printf "\033[0;94mInstalling neovim [${SUDO_USER}]\033[0m\n"
    fi

    sudo -i -u "${SUDO_USER}" npm -g install neovim@latest &>/dev/null
  fi
fi

if [[ "${VERBOSE}" != "-1" ]]; then
  printf "\033[0;92mAll node packages have been installed\033[0m\n"
fi

if [[ "${SUDO}" == "1" ]]; then
  if [[ "" == "$(command -v pip)" ]]; then
    if [[ "${VERBOSE}" == "1" ]]; then
      printf "\033[0;94mInstalling pip\033[0m\n"
    fi

    curl -fL ${ARGS_CURL} https://bootstrap.pypa.io/get-pip.py | python3 - &>/dev/null
    python3 -m pip install --upgrade pip &>/dev/null
  fi
fi

if [[ "${SUDO}" == "1" ]]; then
  if [[ "" == "$(python3 -m pip list | grep pynvim)" ]]; then
    if [[ "${VERBOSE}" == "1" ]]; then
      printf "\033[0;94mInstalling pynvim\033[0m\n"
    fi

    python3 -m pip install --upgrade pynvim &>/dev/null
  fi

  if [[ "${VERBOSE}" != "-1" ]]; then
    printf "\033[0;92mAll pip packages have been installed\033[0m\n"
  fi

  if [[ -f /etc/sudoers.d/90-cloud-init-users ]]; then
    rm /etc/sudoers.d/90-cloud-init-users
  fi

  FILE_CONTENT="Defaults env_keep += \"TMUX\""
  if [[ -f /etc/sudoers.d/50-keep-environment ]]; then
    MD5_CURRENT=$(md5sum /etc/sudoers.d/50-keep-environment | awk '{ print $1 }')
    MD5_NEW=$(echo ${FILE_CONTENT} | md5sum | awk '{ print $1 }')
    if [[ "${MD5_CURRENT}" != "${MD5_NEW}" ]]; then
      if [[ "${VERBOSE}" == "1" ]]; then
        printf "\033[0;94mUpdating sudo environment\033[0m\n"
        printf "\033[0;91mMD5 Mismatch ${MD5_CURRENT}/${MD5_NEW}\033[0m\n"
      fi

      sudo echo ${FILE_CONTENT} > /etc/sudoers.d/50-keep-environment
    fi
  else
    if [[ "${VERBOSE}" == "1" ]]; then
      printf "\033[0;94mUpdating sudo environment\033[0m\n"
    fi

    sudo echo ${FILE_CONTENT} > /etc/sudoers.d/50-keep-environment
  fi
fi

if [[ "${SUDO}" == "1" ]] && [[ "${SUDO_USER}" != "" ]]; then
  FILE_CONTENT="${SUDO_USER} ALL=(ALL) NOPASSWD: ALL"
  if [[ -f /etc/sudoers.d/90-${SUDO_USER}-nopasswd ]]; then
    MD5_CURRENT=$(md5sum /etc/sudoers.d/90-${SUDO_USER}-nopasswd | awk '{ print $1 }')
    MD5_NEW=$(echo "${FILE_CONTENT}" | md5sum | awk '{ print $1 }')
    if [[ "${MD5_CURRENT}" != "${MD5_NEW}" ]]; then
      if [[ "${VERBOSE}" == "1" ]]; then
        printf "\033[0;94mUpdating sudo users\033[0m\n"
        printf "\033[0;91mMD5 Mismatch ${MD5_CURRENT}/${MD5_NEW}\033[0m\n"
      fi

      echo "${FILE_CONTENT}" > /etc/sudoers.d/90-${SUDO_USER}-nopasswd
    fi
  else
    if [[ "${VERBOSE}" == "1" ]]; then
      printf "\033[0;94mUpdating sudo users\033[0m\n"
    fi

    echo "${FILE_CONTENT}" > /etc/sudoers.d/90-${SUDO_USER}-nopasswd
  fi
fi


if [[ "${SUDO}" == "1" ]]; then
  if [[ "$(which zsh)" != "$(getent passwd $USER | awk -F: '{print $NF}')" ]]; then
    if [[ "${VERBOSE}" == "1" ]]; then
      printf "\033[0;94mUpdating shell [$USER]\033[0m\n"
    fi

    chsh ${USER} --shell $(which zsh)
  fi
fi

if [[ "${SUDO}" == "1" ]] && [[ "${SUDO_USER}" != "" ]]; then
  if [[ "$(which zsh)" != "$(getent passwd $SUDO_USER | awk -F: '{print $NF}')" ]]; then
    if [[ "${VERBOSE}" == "1" ]]; then
      printf "\033[0;94mUpdating shell [$SUDO_USER]\033[0m\n"
    fi

    chsh ${SUDO_USER} --shell $(which zsh)
  fi
fi

if [[ "$(which nvim)" != "$(update-alternatives --get-selections | grep 'editor' | awk '{ print $3 }')" ]]; then
  if [[ "${VERBOSE}" == "1" ]]; then
    printf "\033[0;94mUpdating editor\033[0m\n"
  fi

  if [[ "" == "$(update-alternatives --display vi | grep $(which nvim))" ]]; then
    update-alternatives --install /usr/bin/vi vi $(which nvim) 100 ${ARGS_QUIET}
  fi

  if [[ "" == "$(update-alternatives --display editor | grep $(which nvim))" ]]; then
    update-alternatives --install /usr/bin/editor editor $(which nvim) 100 ${ARGS_QUIET}
  fi

  update-alternatives --set editor $(which nvim) ${ARGS_QUIET}
  update-alternatives --set vi $(which nvim) ${ARGS_QUIET}

  chmod -R 440 /etc/sudoers.d/*
fi

if [[ "${SUDO}" == "1" ]] && [[ "${SUDO_USER}" != "" ]]; then
  FILE_CONTENT="\
  #!/bin/bash
  \nneofetch --config /etc/neofetch/config.conf\n"
  if [[ -f /etc/update-motd.d/01-neofetch ]]; then
    MD5_CURRENT=$(md5sum /etc/update-motd.d/01-neofetch | awk '{ print $1 }')
    MD5_NEW=$(echo -en ${FILE_CONTENT} | md5sum | awk '{ print $1 }')
    if [[ "${MD5_CURRENT}" != "${MD5_NEW}" ]]; then
      if [[ "${VERBOSE}" == "1" ]]; then
        printf "\033[0;94mUpdating sudo environment\033[0m\n"
        printf "\033[0;91mMD5 Mismatch ${MD5_CURRENT}/${MD5_NEW}\033[0m\n"
      fi

      sudo echo -en ${FILE_CONTENT} > /etc/update-motd.d/01-neofetch
    fi
  else
    if [[ "${VERBOSE}" == "1" ]]; then
      printf "\033[0;94mUpdating sudo environment\033[0m\n"
    fi

    sudo echo -en ${FILE_CONTENT} > /etc/update-motd.d/01-neofetch
  fi

  if [[ -d "/home/${SUDO_USER}/.dotfiles/default/etc/neofetch" ]]; then
    cp -R "/home/${SUDO_USER}/.dotfiles/default/etc/neofetch" /etc
  fi

  chmod -R 444 /etc/update-motd.d/*
  chmod -R 555 /etc/update-motd.d/01-neofetch
fi

if [[ "${VERBOSE}" != "-1" ]]; then
  if [[ "${SUDO}" == "1" ]]; then
    printf "\033[0;92mAll commands have been executed\033[0m\n"
  fi

  printf "\033[0;92m\n==> All tasks executed successfully\033[0m\n"
fi

unset ARGS_APT
unset ARGS_CURL
unset ARGS_QUIET
unset CONF_NODE
unset DISTRO
unset FILE_CONTENT
unset FORCE
unset INSTALL_NODE
unset INSTALL_LIST
unset MD5_CURRENT
unset MD5_NEW
unset SOURCES_ADDED
unset SUDO
unset VERBOSE
